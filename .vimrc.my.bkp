" ############################################################################ "
" General                                                                      "
" ############################################################################ "

" Set how many lines of history vim has to remember "
set history=700

" Set file type "
filetype plugin on
filetype indent on

" Set auto read when file is changed from outside "
set autoread


" ############################################################################ "
" Vim user interface                                                           "
" ############################################################################ "

" Set line numbers "
set number

" Turn on the WiLd menu "
set wildmenu

" Ignore compiled files "
set wildignore=*.o,*~,*.pyc

" Always show the current position "
set ruler

" Height of the command bar "
set cmdheight=2

" Configure backspace so it acts as it should act "
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Ignore case when searching and be smart about cases "
set ignorecase
set smartcase

" Highlight search results "
set incsearch

" For regular expressions turn magic on "
set magic


" ############################################################################ "
" Color and fonts                                                              "
" ############################################################################ "

" Enable syntax highlighting "
syntax enable

colorscheme desert
set background=dark

" Set extra options when running in GUI mode "
if has("gui_running")
    set guioptions-=T
    set guioptions+=e
    set t_Co=256
    set guitablabel=%M\ %t
endif

" Set utf8 as standard encoding and en_US as the standard language "
set encoding=utf8


" ############################################################################ "
" Text, tab and indent                                                         "
" ############################################################################ "

" Use spaces instead of tabs and set smart tabs"
set expandtab
set smarttab

" 1 tab = 4 spaces "
set shiftwidth=4
set tabstop=4

" Linebreak on 500 chars "
set lbr
set tw=500

set ai   " Auto indent "
set si   " Smart indent "
set wrap " Wrap lines "


" ############################################################################ "
" Status line                                                                  "
" ############################################################################ "

" Always show the status line "
set laststatus=2

" Format the status line "
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l


" ############################################################################ "
" Delete trailing white space on save, useful for Python                       "
" ############################################################################ "

func! DeleteTrailingWS()
  exe "normal mz"
  %s/\s\+$//ge
  exe "normal `z"
endfunc
autocmd BufWrite *.py :call DeleteTrailingWS()
autocmd BufWrite *.coffee :call DeleteTrailingWS()


" ############################################################################ "
" Visual mode related                                                          "
" ############################################################################ "

" Visual mode pressing * or # searches for the current selection "
vnoremap <silent> * :call VisualSelection('f')<CR>
vnoremap <silent> # :call VisualSelection('b')<CR>


" ############################################################################ "
" vimgrep searching and cope displaying                                        "
" ############################################################################ "

" When you press gv you vimgrep after the selected text "
vnoremap <silent> gv :call VisualSelection('gv')<CR>

" Open vimgrep and put the cursor in the right position "
map <leader>g :vimgrep // **/*.<left><left><left><left><left><left><left>

" Vimgreps in the current file "
map <leader><space> :vimgrep // <C-R>%<C-A><right><right><right><right><right><right><right><right><right>

" When you press <leader>r you can search and replace the selected text "
vnoremap <silent> <leader>r :call VisualSelection('replace')<CR>

" Do :help cope if you are unsure what cope is. It's super useful! "
" "
" When you search with vimgrep, display your results in cope by doing: "
"   <leader>cc "
" "
" To go to the next search result do: "
"   <leader>n "
" "
" To go to the previous search results do: "
"   <leader>p "
" "
map <leader>cc :botright cope<cr>
map <leader>co ggVGy:tabnew<cr>:set syntax=qf<cr>pgg
map <leader>n :cn<cr>
map <leader>p :cp<cr>


" ############################################################################ "
" Helper functions                                                             "
" ############################################################################ "

" Returns true if paste mode is enabled "
function! HasPaste()
    if &paste
      return 'PASTE MODE  '
    en
    return ''
endfunction


function! VisualSelection(direction) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("vimgrep " . '/'. l:pattern . '/' . ' **/*.')
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction
